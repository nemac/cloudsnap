#! /usr/bin/python

import json, subprocess, sys, re, argparse, os
import itertools as it
from datetime import datetime, timedelta
#import mock

parser = argparse.ArgumentParser();

parser.add_argument('-m', '--max-snapshots', type=int, nargs=1, help='start at most MAX_SNAPSHOTS')

args = parser.parse_args()

def system(cmd):
    print cmd
    #return os.system(cmd)

def bash_command(command):
    """Run command in a bash subshell, and return its output as a string"""
    return subprocess.Popen(['/bin/bash', '-c', command],
                            stdout=subprocess.PIPE).communicate()[0].strip()

def dictify_tags(objs):
    for obj in objs:
        if "tags" in obj:
            tags = {}
            for tag in obj["tags"]:
                tags[tag["Key"].lower()] = tag["Value"]
            obj["tags"] = tags
    return objs

def tag_eq(obj, name, value):
    return ("tags" in obj) and (name in obj["tags"]) and (obj["tags"][name] == value)

def tag_eqic(obj, name, value):
    return ("tags" in obj) and (name in obj["tags"]) and (obj["tags"][name].lower() == value.lower())

def parse_start_time(startTime):
    return datetime.strptime(startTime[:19], "%Y-%m-%dT%H:%M:%S")

def set_float_from_tag(obj, name):
    if ("tags" in obj) and (name in obj["tags"]):
        try:
            val = float(obj["tags"][name])
            obj[name] = val
        except:
            pass

def sort_snapshots_by_time(snapshots):
    # sorts a list of snapshots by startTime, with newest first ([0] entry will be newsest)
    if len(snapshots) == 0:
        return snapshots
    sorted(snapshots, key = lambda s: s['startTime'], reverse=True)
    return snapshots

def newest_snapshot_time(sorted_snapshots):
    if len(sorted_snapshots) == 0:
        return None
    return parse_start_time(sorted_snapshots[0]['startTime'])

def delete_snapshot(s):
    print "deleting snapshot %s of volume %s" % (s['snapshotId'], s['id'])
    system("cirrus ebs deletess %s" % s['snapshotId'])

def create_snapshot(v, nowstring):
    print "creating new snapshot of volume %s" % v['id']
    system("cirrus ebs ss %s --tags CLOUDSNAP=true" % v['id'])
    system("cirrus ebs settag %s CLOUDSNAPPED '%s'" % (v['id'], nowstring))

volumes = dictify_tags(json.loads(bash_command("cirrus -jj ebs ls")))
snapshots = dictify_tags(json.loads(bash_command("cirrus -jj ebs listss")))
#volumes = dictify_tags(mock.volumes)
#snapshots = dictify_tags(mock.snapshots)

backup_true_volumes0 = [v for v in volumes if tag_eqic(v, "backup", "true")]
for v in backup_true_volumes0:
    set_float_from_tag(v, "frequency")
    set_float_from_tag(v, "retention")
    if "frequency" not in v:
        print "warning: 'Frequency' tag missing or bad value for volume %s; not backing up this volume" % v['id']
    if "retention" not in v:
        print "warning: 'Retention' tag missing or bad value for volume %s; not backing up this volume" % v['id']
backup_true_volumes = [v for v in backup_true_volumes0 if ("frequency" in v) and ("retention" in v)]

cloudsnap_snapshots = [s for s in snapshots if tag_eqic(s, "cloudsnap", "true")]

now = datetime.utcnow()
nowstring = now.strftime("%Y-%m-%d--%H-%M-%S")
snapshots_to_delete = []
volumes_to_snapshot = []
for v in backup_true_volumes:
    retention_cutoff_time = now - timedelta(days=v["retention"])
    frequency_cutoff_time = now - timedelta(days=v["frequency"])
    vsnapshots = sort_snapshots_by_time([s for s in cloudsnap_snapshots if s["id"] == v["id"]])
    newest_snap_time = newest_snapshot_time(vsnapshots)
    if len(vsnapshots) > 1:
        # note use of vsnapshots[1:] below; we never delete the most recent snapshot for a vol
        to_delete = [s for s in vsnapshots[1:] if (parse_start_time(s['startTime']) < retention_cutoff_time)]
        if len(to_delete) > 0:
            snapshots_to_delete = snapshots_to_delete + to_delete
    if (newest_snap_time is None or newest_snap_time < frequency_cutoff_time):
        volumes_to_snapshot.append(v)

for v in volumes_to_snapshot:
    create_snapshot(v, nowstring)

for s in snapshots_to_delete:
    delete_snapshot(s)
 
